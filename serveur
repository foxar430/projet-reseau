import socket
import threading
import time
import select
import random

class SimpleServer:
    def __init__(self, host='0.0.0.0', port=5555):
        self.host = host
        self.port = port
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        # Add TCP keepalive
        self.server.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
        self.server.bind((self.host, self.port))
        self.clients = []
        self.game_state = {"ships": [{}, {}], "turn": 0}
        self.running = True
        
    def start(self):
        self.server.listen(2)
        print(f"Server started on {self.host}:{self.port}")
        
        # Accept exactly 2 players
        while len(self.clients) < 2 and self.running:
            try:
                # Use select with timeout to make this interruptible
                readable, _, _ = select.select([self.server], [], [], 1.0)
                if not readable:
                    continue
                    
                client, address = self.server.accept()
                # Set keepalive for client socket
                client.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)
                # Set a longer timeout for operations
                client.settimeout(30.0)  # 30 second timeout
                
                player_id = len(self.clients)
                self.clients.append({"socket": client, "address": address, "id": player_id})
                print(f"Player {player_id+1} connected from {address}")
                
                # Start a thread for this client
                thread = threading.Thread(target=self.handle_client, args=(client, player_id))
                thread.daemon = True
                thread.start()
                
                # Send player ID with error handling
                try:
                    client.send(f"PLAYER|{player_id}".encode())
                    # Small delay to ensure message is received
                    time.sleep(0.1)
                except Exception as e:
                    print(f"Error sending player ID: {e}")
                
                # If 2 players, start game
                if len(self.clients) == 2:
                    print("Game is starting with 2 players")
                    time.sleep(0.5)  # Allow connections to stabilize
                    self.broadcast("START|0")
            except Exception as e:
                print(f"Error in connection: {e}")
        
        print("Server running with 2 players")
    
    def handle_client(self, client, player_id):
        buffer = ""
        try:
            while self.running:
                try:
                    # Use select for non-blocking reads with timeout
                    readable, _, _ = select.select([client], [], [], 5.0)
                    if not readable:
                        # Send a keep-alive ping periodically
                        try:
                            client.send("PING|".encode())
                        except:
                            break
                        continue
                    
                    # Receive data with timeout protection
                    chunk = client.recv(1024).decode()
                    if not chunk:
                        print(f"Client {player_id+1} disconnected (empty data)")
                        break
                    
                    # Add to buffer and check for complete messages
                    buffer += chunk
                    
                    # Process any complete messages
                    while '|' in buffer:
                        message, buffer = buffer.split('|', 1)
                        if not message:  # Skip empty messages
                            continue
                            
                        print(f"From player {player_id+1}: {message}")
                        
                        if message == "SHIPS":
                            # Save player's ships (simplified)
                            self.game_state["ships"][player_id] = "placed"
                            print(f"Player {player_id+1} placed ships")
                            
                            # Check if both players placed ships
                            if self.game_state["ships"][0] and self.game_state["ships"][1]:
                                print("Both players placed ships - game starting")
                                # Decide which player goes first (we'll set it to player 0 initially)
                                self.game_state["turn"] = 0
                                # Send clear game start message with first player information
                                self.broadcast(f"GAMESTART|{self.game_state['turn']}")
                            else:
                                # Tell this player to wait for the other player
                                client.send("WAIT|".encode())
                                
                                # Tell the other player it's their turn to place ships
                                other_player = 1 if player_id == 0 else 0
                                if other_player < len(self.clients) and self.clients[other_player]:
                                    try:
                                        self.clients[other_player]["socket"].send("YOURPLACEMENT|".encode())
                                    except:
                                        pass
                        
                        elif message.startswith("FIRE"):
                            # Handle a shot with actual coordinates from message
                            parts = message.split(' ')
                            if len(parts) >= 3:
                                try:
                                    row = int(parts[1])
                                    col = int(parts[2])
                                    
                                    # Only allow if it's player's turn
                                    if self.game_state["turn"] != player_id:
                                        client.send("ERROR|Not your turn".encode())
                                        continue
                                        
                                    # Process shot against the opponent's board
                                    target_player = 1 if player_id == 0 else 0
                                    
                                    # Simple hit detection for testing
                                    # In a real implementation, this would check the opponent's ship positions
                                    hit_chance = 0.4  # 40% chance of hit for testing
                                    if random.random() < hit_chance:
                                        result = "HIT"
                                    else:
                                        result = "MISS"
                                    
                                    # Switch turn
                                    self.game_state["turn"] = target_player
                                    
                                    # Broadcast result to both players
                                    self.broadcast(f"SHOT|{player_id}|{row}|{col}|{result}")
                                    print(f"Player {player_id+1} fired at ({row},{col}): {result}")
                                except ValueError:
                                    client.send("ERROR|Invalid coordinates".encode())
                            else:
                                client.send("ERROR|Missing coordinates".encode())
                        
                        elif message == "PONG":
                            # Heartbeat response, do nothing
                            pass
                        
                except socket.timeout:
                    # Socket timeout, send heartbeat
                    try:
                        client.send("PING|".encode())
                    except:
                        break
                except ConnectionResetError:
                    print(f"Connection reset by client {player_id+1}")
                    break
                except ConnectionAbortedError:
                    print(f"Connection aborted by client {player_id+1}")
                    break
                except Exception as e:
                    print(f"Error handling client {player_id+1}: {e}")
                    break
        finally:
            # Client disconnected - clean up
            print(f"Player {player_id+1} disconnected")
            try:
                client.close()
            except:
                pass
                
            # Mark player as disconnected in our list
            for i, c in enumerate(self.clients):
                if c["id"] == player_id:
                    self.clients[i] = None
                    
            # Filter out None values
            self.clients = [c for c in self.clients if c is not None]
            
            # Notify remaining players
            self.broadcast(f"QUIT|{player_id}")
    
    def broadcast(self, message):
        print(f"Broadcasting: {message}")
        for client in self.clients:
            if client is None:
                continue
            try:
                # Make sure all messages end with a pipe character
                if not message.endswith('|'):
                    message += '|'
                client["socket"].send(message.encode())
            except Exception as e:
                print(f"Error broadcasting to client {client['id']+1}: {e}")
    
    def close(self):
        self.running = False
        time.sleep(1)  # Give time for threads to notice running=False
        for client in self.clients:
            if client is None:
                continue
            try:
                client["socket"].close()
            except:
                pass
        self.server.close()
        print("Server closed")

if __name__ == "__main__":
    server = SimpleServer()
    try:
        print("Simple Battleship server starting...")
        server.start()
        # Keep server running
        while server.running:
            time.sleep(1)
    except KeyboardInterrupt:
        print("Server shutting down...")
    finally:
        server.close()
