import asyncio
import json
import threading
import queue
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('BattleshipNetwork')

class NetworkClient:
    def __init__(self, message_callback):
        self.writer = None
        self.reader = None
        self.connected = False
        self.message_queue = queue.Queue()
        self.message_callback = message_callback
        self.event_loop = None
        self.network_thread = None
        self.session_id = None
        self.player_num = None
        self.opponent_name = None
    
    def connect(self, server_ip, server_port, player_name):
        """Connect to the server in a separate thread"""
        self.network_thread = threading.Thread(
            target=self._run_network_thread,
            args=(server_ip, server_port, player_name),
            daemon=True
        )
        self.network_thread.start()
        return True
    
    def _run_network_thread(self, server_ip, server_port, player_name):
        """Run the asyncio event loop in a separate thread"""
        self.event_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self.event_loop)
        
        try:
            self.event_loop.run_until_complete(
                self._connect_async(server_ip, server_port, player_name)
            )
        except Exception as e:
            logger.error(f"Network error: {e}")
            self.connected = False
            self.message_callback({"type": "connection_error", "message": str(e)})
    
    async def _connect_async(self, server_ip, server_port, player_name):
        """Establish connection to server and handle communication"""
        try:
            print(f"Tentative de connexion à {server_ip}:{server_port}...")
            self.reader, self.writer = await asyncio.open_connection(server_ip, server_port)
            
            # Envoyer le nom du joueur
            name_message = {"name": player_name}
            print(f"Envoi du nom: {player_name}")
            self.writer.write(json.dumps(name_message).encode() + b'\n')
            await self.writer.drain()
            
            self.connected = True
            self.message_callback({"type": "connected"})
            
            # Start sending queued messages
            process_queue_task = asyncio.create_task(self._process_queue())
            
            # Traitement des messages entrants
            while self.connected:
                try:
                    data = await self.reader.readline()
                    if not data:  # Le serveur a fermé la connexion
                        print("Serveur déconnecté")
                        self.connected = False
                        self.message_callback({"type": "disconnected", "reason": "Serveur déconnecté"})
                        break
                    
                    message = json.loads(data.decode())
                    print(f"Reçu du serveur: {message.get('type')}")  # Debug
                    
                    # Transmettre le message au jeu
                    self.message_callback(message)
                    
                except json.JSONDecodeError:
                    print("JSON invalide reçu")
                    continue
        except (ConnectionRefusedError, OSError) as e:
            self.connected = False
            self.message_callback({"type": "connection_error", "message": f"Could not connect to server: {e}"})
        finally:
            if self.writer and not self.writer.is_closing():
                self.writer.close()
                await self.writer.wait_closed()
            
            self.connected = False
    
    async def _process_queue(self):
        """Process outgoing message queue"""
        while self.connected:
            try:
                # Non-blocking queue check with small sleep
                try:
                    message = self.message_queue.get_nowait()
                    print(f"Envoi du message: {message}")  # Debug
                    self.writer.write(json.dumps(message).encode() + b'\n')
                    await self.writer.drain()
                    self.message_queue.task_done()
                except queue.Empty:
                    await asyncio.sleep(0.01)
            except Exception as e:
                logger.error(f"Error sending message: {e}")
    
    def send_message(self, message):
        """Queue a message to be sent to the server"""
        if self.connected:
            self.message_queue.put(message)
            return True
        return False
    
    def disconnect(self):
        """Disconnect from the server"""
        if self.connected:
            self.connected = False
            
            # Clean up in the event loop thread
            if self.event_loop and self.writer:
                asyncio.run_coroutine_threadsafe(self._close_writer(), self.event_loop)
    
    async def _close_writer(self):
        """Close the writer connection"""
        if self.writer and not self.writer.is_closing():
            self.writer.close()
            await self.writer.wait_closed()
